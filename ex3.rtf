{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #' ---\
#' title: Diffusion equation\
#' author: Leonor\
#' date: 30 January 2024\
#' ---\
\
##### Packages ####\
library(deSolve)\
library(MetBrewer)\
library(ggplot2)\
\
n <- 100\
d <- 100\
param.deltaZ <- d/n\
t <- 100\
param.u <- 0.04\
param.D <- 5\
z <- c()\
param.kw <- 0.2\
param.kp <- 15*10^(-12)\
param.Io <- 350\
param.HI <- 30\
param.gmax <-0.04\
param.m <- 0.01\
param.HN <- 0.0425\
param.Nb <- 47.5\
param.Y <- 10^(-9)\
\
#Defining the grid\
\
z = seq(param.deltaZ/2, by=param.deltaZ, to=d)\
\
#Defining phi\
\
#phi <- seq(1,n,1)\
phi <- rep(1000000,n)\
#phi[1] <- 10\
\
P <- phi[1]\
\
#Defining N\
\
N <- rep(1,n)\
#N[1] <-100\
\
Y <- c(phi, N)\
\
#Integral of light intensity\
\
\
func.I = function (param, P)\{\
  integral = cumsum(param.kw + param.kp*P)*param.deltaZ - 0.5*param.deltaZ*(param.kw + param.kp*P)\
  I <- param.Io*exp(- integral)\
  \
  return(I)\
\}\
\
I.out <- func.I(param,P)\
\
#plot(I.out,z)\
\
\
#Defining the flux\
\
derivative = function(t, Y, params) \{\
  \
  phi <- Y[1:n]\
  N <- Y[(n+1):(2*n)]\
  \
  Ja <- rep(0, n+1)\
  Jd <- rep(0, n+1)\
  JN <- rep(0,n+1)\
  \
  for(i in 2:n)\{\
    Ja[i] <- param.u*phi[i-1]\
    Jd[i] <- -param.D*(phi[i]-phi[i-1])/param.deltaZ\
    JN[i] <- -param.D*(N[i]-N[i-1])/param.deltaZ \
  \}\
\
#Boundary conditions  \
  Ja[1] <- 0\
  Ja[n+1] <- 0\
  Jd[1] <- 0\
  Jd[n+1] <- 0\
  JN[n+1] <- -param.D*(param.Nb-N[n])/param.deltaZ\
  JN[1] <- 0\
  \
  J <- Ja + Jd \
  \
  dphidt <- seq (1,n,1)\
  dNdt <- seq (1,n,1)\
  \
  # Calculate I\
  I = func.I(param,phi)\
  \
  # calculate r\
  g = param.gmax*pmin(I/(I+param.HI), N/(N+param.HN))\
  r = g - param.m\
  \
  \
  for (i in 1:n)\{\
    dphidt[i] <- r[i]*phi[i]- (J[i+1]- J[i])/param.deltaZ\
    dNdt[i] <- -param.Y*r[i]*phi[i] - (JN[i+1]- JN[i])/param.deltaZ\
  \}\
  \
  return( list(c(dphidt, dNdt)) )\
\}\
\
\
times <- seq(0,10000,1)  \
\
derivative.out <- ode(Y, times, derivative)\
derivative.out\
\
phi.out <- derivative.out[,2:(n+1)]\
N.out <- derivative.out[,(n+2):(2*n+1)]\
\
#g <- derivative.out[]\
\
time = derivative.out[,1]\
#ph = derivative.out[,ncol(derivative.out):2]\
\
image(time,z,phi.out[,ncol(phi.out):1],col = hcl.colors(50, "viridis"), ylab="Distance from seabed", main="Phytoplankton")\
image(time,z,N.out[,ncol(phi.out):1],col = hcl.colors(50, "viridis"), ylab="Distance from seabed", main= "Nutrients")\
}