{\rtf1\ansi\ansicpg1252\cocoartf2639
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 #' ---\
#' title: Diffusion equation\
#' author: Leonor\
#' date: 30 January 2024\
#' ---\
\
##### Packages ####\
library(deSolve)\
library(MetBrewer)\
library(ggplot2)\
\
n <- 100\
d <- 100\
param.deltaZ <- d/n\
t <- 100\
u <- 0.04\
D <- 5\
z <- c()\
param.kw <- 0.2\
param.kp <- 15*10^(-12)\
param.Io <- 350\
param.H <- 30\
param.pmax <-0.04\
param.m <- 0.01\
\
#Defining the grid\
\
z = seq(param.deltaZ/2, by=param.deltaZ, to=d)\
\
#Defining phi\
\
phi <- seq(1,n,1)\
phi <- rep(0,n)\
phi[1] <- 10\
\
P <- phi[1]\
 \
#Integral of light intensity\
\
\
func.I = function (param, P)\{\
  integral = cumsum(param.kw + param.kp*P)*param.deltaZ - 0.5*param.deltaZ*(param.kw + param.kp*P)\
  I <- param.Io*exp(- integral)\
  \
  return(I)\
\}\
\
I.out <- func.I(param,P)\
\
#plot(I.out,z)\
\
\
#Defining the flux\
\
derivative = function(t, phi, params) \{\
  \
  Ja <- rep(0, n+1)\
  Jd <- rep(0, n+1)\
  \
  \
  \
  for(i in 2:n)\{\
    Ja[i] <- u*phi[i-1]\
    Jd[i] <- -D*(phi[i]-phi[i-1])/param.deltaZ\
  \}\
  \
  Ja[1] <- 0\
  Ja[n+1] <- 0\
  Jd[1] <- 0\
  Jd[n+1] <- 0\
  \
  J <- Ja + Jd \
  \
  dphidt <- seq (1,n,1)\
  \
  # Calculate I\
  I = func.I(param,phi)\
  \
  # calculate r\
    g = I/(I+param.H)*param.pmax\
    r = g - param.m\
  \
  for (i in 1:n)\{\
    dphidt[i] <- r[i]*phi[i]- (J[i+1]- J[i])/param.deltaZ\
  \}\
  \
  return( list(dphidt) )\
\}\
\
\
times <- seq(0,1000,1)  \
\
derivative.out <- ode(phi, times, derivative)\
derivative.out\
\
light.out = func.I(param, derivative.out[1,2:ncol(derivative.out)])\
plot(light.out,-z, type='l')\
\
\
time = derivative.out[,1]\
ph = derivative.out[,ncol(derivative.out):2]\
image(time,-z,ph,col = hcl.colors(50, "viridis"))\
\
#for (n in seq(1, length(times), by = 5)) \{\
#  plot(derivative.out[n, -1], -z, type = "l", col = "blue", xlim = c(0,5000),\
#       xlab = "Concentration", ylab = "Depth", #ylim =c(0,100), #, xlim =c(-1,100),\
#       main = paste("Phytoplankton at Time =", times[n]))\
#  if (n < length(times)) Sys.sleep(0.5)  # Pause between frames for visibility\
#\}\
2}